{"ast":null,"code":"/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { CommonModule } from '@angular/common';\nimport { InjectionToken, NgModule } from '@angular/core';\nimport { NotifierContainerComponent } from './components/notifier-container.component';\nimport { NotifierNotificationComponent } from './components/notifier-notification.component';\nimport { NotifierConfig } from './models/notifier-config.model';\nimport { NotifierAnimationService } from './services/notifier-animation.service';\nimport { NotifierQueueService } from './services/notifier-queue.service';\nimport { NotifierService } from './services/notifier.service';\n/**\n * Injection Token for notifier options\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from '@angular/common';\nexport const\n/** @type {?} */\nNotifierOptionsToken = new InjectionToken('[angular-notifier] Notifier Options');\n/**\n * Injection Token for notifier configuration\n */\n\nexport const\n/** @type {?} */\nNotifierConfigToken = new InjectionToken('[anuglar-notifier] Notifier Config');\n/**\n * Factory for a notifier configuration with custom options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @param {?} options - Custom notifier options\n * @return {?} - Notifier configuration as result\n */\n\nexport function notifierCustomConfigFactory(options) {\n  return new NotifierConfig(options);\n}\n/**\n * Factory for a notifier configuration with default options\n *\n * Sidenote:\n * Required as Angular AoT compilation cannot handle dynamic functions; see <https://github.com/angular/angular/issues/11262>.\n *\n * @return {?} - Notifier configuration as result\n */\n\nexport function notifierDefaultConfigFactory() {\n  return new NotifierConfig({});\n}\n/**\n * Notifier module\n */\n\nexport let NotifierModule = /*#__PURE__*/(() => {\n  class NotifierModule {\n    /**\n     * Setup the notifier module with custom providers, in this case with a custom configuration based on the givne options\n     *\n     * @param {?=} options\n     * @return {?} - Notifier module with custom providers\n     */\n    static withConfig(options = {}) {\n      return {\n        ngModule: NotifierModule,\n        providers: [// Provide the options itself upfront (as we need to inject them as dependencies -- see below)\n        {\n          provide: NotifierOptionsToken,\n          useValue: options\n        }, // Provide a custom notifier configuration, based on the given notifier options\n        {\n          deps: [NotifierOptionsToken],\n          provide: NotifierConfigToken,\n          useFactory: notifierCustomConfigFactory\n        }]\n      };\n    }\n\n  }\n\n  NotifierModule.ɵfac = function NotifierModule_Factory(t) {\n    return new (t || NotifierModule)();\n  };\n\n  NotifierModule.ɵmod = /*@__PURE__*/ɵngcc0.ɵɵdefineNgModule({\n    type: NotifierModule\n  });\n  NotifierModule.ɵinj = /*@__PURE__*/ɵngcc0.ɵɵdefineInjector({\n    providers: [NotifierAnimationService, NotifierService, NotifierQueueService, // Provide the default notifier configuration if just the module is imported\n    {\n      provide: NotifierConfigToken,\n      useFactory: notifierDefaultConfigFactory\n    }],\n    imports: [[CommonModule]]\n  });\n  return NotifierModule;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n(function () {\n  (typeof ngJitMode === \"undefined\" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(NotifierModule, {\n    declarations: function () {\n      return [NotifierContainerComponent, NotifierNotificationComponent];\n    },\n    imports: function () {\n      return [CommonModule];\n    },\n    exports: function () {\n      return [NotifierContainerComponent];\n    }\n  });\n})();\n\nɵngcc0.ɵɵsetComponentScope(NotifierContainerComponent, [ɵngcc1.NgForOf, NotifierNotificationComponent], []); //# sourceMappingURL=notifier.module.js.map","map":null,"metadata":{},"sourceType":"module"}