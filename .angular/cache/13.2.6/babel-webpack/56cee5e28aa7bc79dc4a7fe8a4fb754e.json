{"ast":null,"code":"/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { Injectable } from '@angular/core';\nimport { fade } from './../animation-presets/fade.animation-preset';\nimport { slide } from './../animation-presets/slide.animation-preset';\n/**\n * Notifier animation service\n */\n\nimport * as ɵngcc0 from '@angular/core';\nexport let NotifierAnimationService = /*#__PURE__*/(() => {\n  class NotifierAnimationService {\n    /**\n     * Constructor\n     */\n    constructor() {\n      this.animationPresets = {\n        fade,\n        slide\n      };\n    }\n    /**\n     * Get animation data\n     *\n     * This method generates all data the Web Animations API needs to animate our notification. The result depends on both the animation\n     * direction (either in or out) as well as the notifications (and its attributes) itself.\n     *\n     * @param {?} direction    Animation direction, either in or out\n     * @param {?} notification Notification the animation data should be generated for\n     * @return {?} Animation information\n     */\n\n\n    getAnimationData(direction, notification) {\n      // Get all necessary animation data\n      let\n      /** @type {?} */\n      keyframes;\n      let\n      /** @type {?} */\n      duration;\n      let\n      /** @type {?} */\n      easing;\n\n      if (direction === 'show') {\n        keyframes = this.animationPresets[notification.component.getConfig().animations.show.preset].show(notification);\n        duration = notification.component.getConfig().animations.show.speed;\n        easing = notification.component.getConfig().animations.show.easing;\n      } else {\n        keyframes = this.animationPresets[notification.component.getConfig().animations.hide.preset].hide(notification);\n        duration = notification.component.getConfig().animations.hide.speed;\n        easing = notification.component.getConfig().animations.hide.easing;\n      } // Build and return animation data\n\n\n      return {\n        keyframes: [keyframes.from, keyframes.to],\n        options: {\n          duration,\n          easing,\n          fill: 'forwards' // Keep the newly painted state after the animation finished\n\n        }\n      };\n    }\n\n  }\n\n  NotifierAnimationService.ɵfac = function NotifierAnimationService_Factory(t) {\n    return new (t || NotifierAnimationService)();\n  };\n\n  NotifierAnimationService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NotifierAnimationService,\n    factory: NotifierAnimationService.ɵfac\n  });\n  /** @nocollapse */\n\n  return NotifierAnimationService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction NotifierAnimationService_tsickle_Closure_declarations() {\n  /**\n   * List of animation presets (currently static)\n   * @type {?}\n   */\n  NotifierAnimationService.prototype.animationPresets;\n} //# sourceMappingURL=notifier-animation.service.js.map","map":null,"metadata":{},"sourceType":"module"}