{"ast":null,"code":"/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n\n/**\n * @record\n */\nexport function NotifierOptions() {}\n\nfunction NotifierOptions_tsickle_Closure_declarations() {\n  /** @type {?|undefined} */\n  NotifierOptions.prototype.animations;\n  /** @type {?|undefined} */\n\n  NotifierOptions.prototype.behaviour;\n  /** @type {?|undefined} */\n\n  NotifierOptions.prototype.position;\n  /** @type {?|undefined} */\n\n  NotifierOptions.prototype.theme;\n}\n/**\n * Notifier configuration\n *\n * The notifier configuration defines what notifications look like, how they behave, and how they get animated. It is a global\n * configuration, which means that it only can be set once (at the beginning), and cannot be changed afterwards. Aligning to the world of\n * Angular, this configuration can be provided in the root app module - alternatively, a meaningful default configuration will be used.\n */\n\n\nexport class NotifierConfig {\n  /**\n   * Constructor\n   *\n   * @param {?=} customOptions\n   */\n  constructor(customOptions = {}) {\n    // Set default values\n    this.animations = {\n      enabled: true,\n      hide: {\n        easing: 'ease',\n        offset: 50,\n        preset: 'fade',\n        speed: 300\n      },\n      overlap: 150,\n      shift: {\n        easing: 'ease',\n        speed: 300\n      },\n      show: {\n        easing: 'ease',\n        preset: 'slide',\n        speed: 300\n      }\n    };\n    this.behaviour = {\n      autoHide: 7000,\n      onClick: false,\n      onMouseover: 'pauseAutoHide',\n      showDismissButton: true,\n      stacking: 4\n    };\n    this.position = {\n      horizontal: {\n        distance: 12,\n        position: 'left'\n      },\n      vertical: {\n        distance: 12,\n        gap: 10,\n        position: 'bottom'\n      }\n    };\n    this.theme = 'material'; // The following merges the custom options into the notifier config, respecting the already set default values\n    // This linear, more explicit and code-sizy workflow is preferred here over a recursive one (because we know the object structure)\n    // Technical sidenote: Objects are merged, other types of values simply overwritten / copied\n\n    if (customOptions.theme !== undefined) {\n      this.theme = customOptions.theme;\n    }\n\n    if (customOptions.animations !== undefined) {\n      if (customOptions.animations.enabled !== undefined) {\n        this.animations.enabled = customOptions.animations.enabled;\n      }\n\n      if (customOptions.animations.overlap !== undefined) {\n        this.animations.overlap = customOptions.animations.overlap;\n      }\n\n      if (customOptions.animations.hide !== undefined) {\n        Object.assign(this.animations.hide, customOptions.animations.hide);\n      }\n\n      if (customOptions.animations.shift !== undefined) {\n        Object.assign(this.animations.shift, customOptions.animations.shift);\n      }\n\n      if (customOptions.animations.show !== undefined) {\n        Object.assign(this.animations.show, customOptions.animations.show);\n      }\n    }\n\n    if (customOptions.behaviour !== undefined) {\n      Object.assign(this.behaviour, customOptions.behaviour);\n    }\n\n    if (customOptions.position !== undefined) {\n      if (customOptions.position.horizontal !== undefined) {\n        Object.assign(this.position.horizontal, customOptions.position.horizontal);\n      }\n\n      if (customOptions.position.vertical !== undefined) {\n        Object.assign(this.position.vertical, customOptions.position.vertical);\n      }\n    }\n  }\n\n}\n\nfunction NotifierConfig_tsickle_Closure_declarations() {\n  /**\n   * Customize animations\n   * @type {?}\n   */\n  NotifierConfig.prototype.animations;\n  /**\n   * Customize behaviour\n   * @type {?}\n   */\n\n  NotifierConfig.prototype.behaviour;\n  /**\n   * Customize positioning\n   * @type {?}\n   */\n\n  NotifierConfig.prototype.position;\n  /**\n   * Customize theming\n   * @type {?}\n   */\n\n  NotifierConfig.prototype.theme;\n} //# sourceMappingURL=notifier-config.model.js.map","map":null,"metadata":{},"sourceType":"module"}