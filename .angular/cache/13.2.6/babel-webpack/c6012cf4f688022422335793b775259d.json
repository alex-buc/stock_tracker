{"ast":null,"code":"/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { Inject, Injectable, forwardRef } from '@angular/core';\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierQueueService } from './notifier-queue.service';\nimport { NotifierConfigToken } from './../notifier.module';\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nimport * as ɵngcc1 from './notifier-queue.service';\nimport * as ɵngcc2 from './../models/notifier-config.model';\nexport let NotifierService = /*#__PURE__*/(() => {\n  class NotifierService {\n    /**\n     * Constructor\n     *\n     * @param {?} notifierQueueService Notifier queue service\n     * @param {?} config               Notifier configuration, optionally injected as a dependency\n     */\n    constructor(notifierQueueService, config // The forwardRef is (sadly) required here\n    ) {\n      this.queueService = notifierQueueService;\n      this.config = config;\n    }\n    /**\n     * Get the notifier configuration\n     *\n     * @return {?} Notifier configuration\n     */\n\n\n    getConfig() {\n      return this.config;\n    }\n    /**\n     * API: Show a new notification\n     *\n     * @param {?} notificationOptions Notification options\n     * @return {?}\n     */\n\n\n    show(notificationOptions) {\n      this.queueService.push({\n        payload: notificationOptions,\n        type: 'SHOW'\n      });\n    }\n    /**\n     * API: Hide a specific notification, given its ID\n     *\n     * @param {?} notificationId ID of the notification to hide\n     * @return {?}\n     */\n\n\n    hide(notificationId) {\n      this.queueService.push({\n        payload: notificationId,\n        type: 'HIDE'\n      });\n    }\n    /**\n     * API: Hide the newest notification\n     * @return {?}\n     */\n\n\n    hideNewest() {\n      this.queueService.push({\n        type: 'HIDE_NEWEST'\n      });\n    }\n    /**\n     * API: Hide the oldest notification\n     * @return {?}\n     */\n\n\n    hideOldest() {\n      this.queueService.push({\n        type: 'HIDE_OLDEST'\n      });\n    }\n    /**\n     * API: Hide all notifications at once\n     * @return {?}\n     */\n\n\n    hideAll() {\n      this.queueService.push({\n        type: 'HIDE_ALL'\n      });\n    }\n    /**\n     * API: Shortcut for showing a new notification\n     *\n     * @param {?} type             Type of the notification\n     * @param {?} message          Message of the notification\n     * @param {?=} notificationId\n     * @return {?}\n     */\n\n\n    notify(type, message, notificationId) {\n      let\n      /** @type {?} */\n      notificationOptions = {\n        message,\n        type\n      };\n\n      if (notificationId !== undefined) {\n        notificationOptions.id = notificationId;\n      }\n\n      this.show(notificationOptions);\n    }\n\n  }\n\n  NotifierService.ɵfac = function NotifierService_Factory(t) {\n    return new (t || NotifierService)(ɵngcc0.ɵɵinject(ɵngcc1.NotifierQueueService), ɵngcc0.ɵɵinject(forwardRef(() => NotifierConfigToken)));\n  };\n\n  NotifierService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NotifierService,\n    factory: NotifierService.ɵfac\n  });\n  /** @nocollapse */\n\n  return NotifierService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction NotifierService_tsickle_Closure_declarations() {\n  /**\n   * Notifier queue service\n   * @type {?}\n   */\n  NotifierService.prototype.queueService;\n  /**\n   * Notifier configuration\n   * @type {?}\n   */\n\n  NotifierService.prototype.config;\n} //# sourceMappingURL=notifier.service.js.map","map":null,"metadata":{},"sourceType":"module"}