{"ast":null,"code":"/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nimport { Injectable } from '@angular/core';\n/**\n * Notifier timer service\n *\n * This service acts as a timer, needed due to the still rather limited setTimeout JavaScript API. The timer service can start and stop a\n * timer. Furthermore, it can also pause the timer at any time, and resume later on. The timer API workd promise-based.\n */\n\nimport * as ɵngcc0 from '@angular/core';\nexport let NotifierTimerService = /*#__PURE__*/(() => {\n  class NotifierTimerService {\n    /**\n     * Constructor\n     */\n    constructor() {\n      this.now = 0;\n      this.remaining = 0;\n    }\n    /**\n     * Start (or resume) the timer\n     *\n     * @param {?} duration Timer duration, in ms\n     * @return {?} Promise, resolved once the timer finishes\n     */\n\n\n    start(duration) {\n      return new Promise((resolve, reject) => {\n        // For the first run ...\n        this.remaining = duration; // Setup, then start the timer\n\n        this.finishPromiseResolver = resolve;\n        this.continue();\n      });\n    }\n    /**\n     * Pause the timer\n     * @return {?}\n     */\n\n\n    pause() {\n      clearTimeout(this.timerId);\n      this.remaining -= new Date().getTime() - this.now;\n    }\n    /**\n     * Continue the timer\n     * @return {?}\n     */\n\n\n    continue() {\n      this.now = new Date().getTime();\n      this.timerId = window.setTimeout(() => {\n        this.finish();\n      }, this.remaining);\n    }\n    /**\n     * Stop the timer\n     * @return {?}\n     */\n\n\n    stop() {\n      clearTimeout(this.timerId);\n      this.remaining = 0;\n    }\n    /**\n     * Finish up the timeout by resolving the timer promise\n     * @return {?}\n     */\n\n\n    finish() {\n      this.finishPromiseResolver();\n    }\n\n  }\n\n  NotifierTimerService.ɵfac = function NotifierTimerService_Factory(t) {\n    return new (t || NotifierTimerService)();\n  };\n\n  NotifierTimerService.ɵprov = /*@__PURE__*/ɵngcc0.ɵɵdefineInjectable({\n    token: NotifierTimerService,\n    factory: NotifierTimerService.ɵfac\n  });\n  /** @nocollapse */\n\n  return NotifierTimerService;\n})();\n\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\nfunction NotifierTimerService_tsickle_Closure_declarations() {\n  /**\n   * Timestamp (in ms), created in the moment the timer starts\n   * @type {?}\n   */\n  NotifierTimerService.prototype.now;\n  /**\n   * Remaining time (in ms)\n   * @type {?}\n   */\n\n  NotifierTimerService.prototype.remaining;\n  /**\n   * Timeout ID, used for clearing the timeout later on\n   * @type {?}\n   */\n\n  NotifierTimerService.prototype.timerId;\n  /**\n   * Promise resolve function, eventually getting called once the timer finishes\n   * @type {?}\n   */\n\n  NotifierTimerService.prototype.finishPromiseResolver;\n} //# sourceMappingURL=notifier-timer.service.js.map","map":null,"metadata":{},"sourceType":"module"}