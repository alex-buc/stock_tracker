{"version":3,"file":"notifier.service.js","sources":["notifier.service.ts"],"names":[],"mappings":";;;;AAAA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE/D,OAAO,EAAE,cAAc,EAAE,MAAM,mCAAmC,CAAC;AAEnE,OAAO,EAAE,oBAAoB,EAAE,MAAM,0BAA0B,CAAC;AAChE,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAC3D;AACG;AACgB;AACjB;AACyI;AACJ;AAC9B;;;;AAGzG,MAAM;AACN;AAEE;AAAmB;AACpB;AAGD;AAMW;AACR,gBAKK,oBAA0C,EACK,MAAsB;AAC7E;AACA,QAAQ,IAAI,CAAC,YAAY,GAAG,oBAAoB,CAAC;AACjD,QAAQ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;AAC7B;AACA;AAEE;AAED;AAAO;AAEC;AAAQ,IAAN,SAAS;AAAK,QACjB,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC;AAC3B;AACA;AAEE;AAED;AAAO;AAEE;AAAmB;AAAQ,IAA1B,IAAI,CAAC,mBAAgD;AAAI,QAC5D,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;AAC/B,YAAY,OAAO,EAAE,mBAAmB;AACxC,YAAY,IAAI,EAAE,MAAM;AACxB,SAAS,CAAC,CAAC;AACX;AACA;AAEE;AAED;AAAO;AAEE;AAAmB;AAAQ,IAA1B,IAAI,CAAC,cAAsB;AAAI,QAClC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;AAC/B,YAAY,OAAO,EAAE,cAAc;AACnC,YAAY,IAAI,EAAE,MAAM;AACxB,SAAS,CAAC,CAAC;AACX;AACA;AAEE;AAEF;AAAmB;AAAQ,IAAhB,UAAU;AAAK,QAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;AAC/B,YAAY,IAAI,EAAE,aAAa;AAC/B,SAAS,CAAC,CAAC;AACX;AACA;AAEE;AAEF;AAAmB;AAAQ,IAAhB,UAAU;AAAK,QAClB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;AAC/B,YAAY,IAAI,EAAE,aAAa;AAC/B,SAAS,CAAC,CAAC;AACX;AACA;AAEE;AAEF;AAAmB;AAAQ,IAAhB,OAAO;AAAK,QACf,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC;AAC/B,YAAY,IAAI,EAAE,UAAU;AAC5B,SAAS,CAAC,CAAC;AACX;AACA;AAEE;AAED;AAAO;AACO;AACO;AAAkC;AAExD;AAAQ,IAAG,MAAM,CAAC,IAAY,EAAE,OAAe,EAAE,cAAuB;AAAI,QACpE,qBAAI,mBAAmB,GAAgC;AAC/D,YAAY,OAAO;AACnB,YAAY,IAAI;AAChB,SAAS,CAAC;AACV,QAAQ,EAAE,CAAC,CAAC,cAAc,KAAK,SAAS,CAAC,CAAC,CAAC;AAC3C,YAAY,mBAAmB,CAAC,EAAE,GAAG,cAAc,CAAC;AACpD,SAAS;AACT,QAAQ,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,CAAC;AACvC;AACA;2CAxGC,UAAU;2HACR;AAAC;AAAmB;AAIvB,YAfS,oBAAoB;AAAI,YAFxB,cAAc,uBAiCd,MAAM,SAAC,UAAU,CAAC,GAAG,EAAE,CAAC,mBAAmB,CAAC;AAAQ;;;;;;kCAAE;AAAC;AAC/D;AACA;AAA8B;AAAiB;AAC1C;AAIE;AAAQ;AAET;AAAiB;AAAQ;AAEH;AAAE","sourcesContent":["import { Inject, Injectable, forwardRef } from '@angular/core';\n\nimport { NotifierConfig } from './../models/notifier-config.model';\nimport { NotifierNotificationOptions } from './../models/notifier-notification.model';\nimport { NotifierQueueService } from './notifier-queue.service';\nimport { NotifierConfigToken } from './../notifier.module';\n\n/**\n * Notifier service\n *\n * This service provides access to the public notifier API. Once injected into a component, directive, pipe, service, or any other building\n * block of an applications, it can be used to show new notifications, and hide existing ones. Internally, it transforms API calls into\n * actions, which then get thrown into the action queue - eventually being processed at the right moment.\n */\n@Injectable()\nexport class NotifierService {\n\n\t/**\n\t * Notifier queue service\n\t */\n    private readonly queueService: NotifierQueueService;\n\n\t/**\n\t * Notifier configuration\n\t */\n    private readonly config: NotifierConfig;\n\n\t/**\n\t * Constructor\n\t *\n\t * @param notifierQueueService Notifier queue service\n\t * @param config               Notifier configuration, optionally injected as a dependency\n\t */\n    public constructor(\n        notifierQueueService: NotifierQueueService,\n        @Inject(forwardRef(() => NotifierConfigToken)) config: NotifierConfig // The forwardRef is (sadly) required here\n    ) {\n        this.queueService = notifierQueueService;\n        this.config = config;\n    }\n\n\t/**\n\t * Get the notifier configuration\n\t *\n\t * @returns Notifier configuration\n\t */\n    public getConfig(): NotifierConfig {\n        return this.config;\n    }\n\n\t/**\n\t * API: Show a new notification\n\t *\n\t * @param notificationOptions Notification options\n\t */\n    public show(notificationOptions: NotifierNotificationOptions): void {\n        this.queueService.push({\n            payload: notificationOptions,\n            type: 'SHOW'\n        });\n    }\n\n\t/**\n\t * API: Hide a specific notification, given its ID\n\t *\n\t * @param notificationId ID of the notification to hide\n\t */\n    public hide(notificationId: string): void {\n        this.queueService.push({\n            payload: notificationId,\n            type: 'HIDE'\n        });\n    }\n\n\t/**\n\t * API: Hide the newest notification\n\t */\n    public hideNewest(): void {\n        this.queueService.push({\n            type: 'HIDE_NEWEST'\n        });\n    }\n\n\t/**\n\t * API: Hide the oldest notification\n\t */\n    public hideOldest(): void {\n        this.queueService.push({\n            type: 'HIDE_OLDEST'\n        });\n    }\n\n\t/**\n\t * API: Hide all notifications at once\n\t */\n    public hideAll(): void {\n        this.queueService.push({\n            type: 'HIDE_ALL'\n        });\n    }\n\n\t/**\n\t * API: Shortcut for showing a new notification\n\t *\n\t * @param type             Type of the notification\n\t * @param message          Message of the notification\n\t * @param [notificationId] Unique ID for the notification (optional)\n\t */\n    public notify(type: string, message: string, notificationId?: string): void {\n        let notificationOptions: NotifierNotificationOptions = {\n            message,\n            type\n        };\n        if (notificationId !== undefined) {\n            notificationOptions.id = notificationId;\n        }\n        this.show(notificationOptions);\n    }\n\n}\n"]}